name: Docker Image CI

on:
  push:
    branches: [ "master" ]
    paths:
      - 'docker/**'
      - '.github/workflows/docker-image-ci.yml'
      - 'Cargo.toml'  # 依赖变更时触发构建
      - 'src/**'      # 代码变更时触发构建
  pull_request:
    branches: [ "master" ]
    paths:
      - 'docker/**'
      - '.github/workflows/docker-image-ci.yml'
      - 'Cargo.toml'
      - 'src/**'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # 支持多架构构建（根据需求调整）
        arch:
          - { name: "amd64",   platform: "linux/amd64" }
          - { name: "arm64v8", platform: "linux/arm64" }
          - { name: "armv7",   platform: "linux/arm/v7" }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive  # 拉取子模块，解决 hbb_common 依赖问题

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3  # 支持跨架构构建

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/rustdesk-server
          tags: |
            # 为每个架构生成带后缀的标签（如 latest-amd64）
            type=raw,value=latest-${{ matrix.arch.name }},enable={{is_default_branch}}
            type=ref,event=branch,format={{ref_name}}-${{ matrix.arch.name }}
            type=sha,format=short,format=sha-${{ matrix.arch.name }}-{{sha}}

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: ${{ matrix.arch.platform }}  # 构建当前架构
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false  # 禁用 SBOM 生成，加速构建

  # 多架构镜像合并（为单一标签创建 manifest）
  create-manifest:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push multi-arch manifest (latest)
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          base-image: ${{ secrets.DOCKER_USERNAME }}/rustdesk-server:latest
          extra-images: |
            ${{ secrets.DOCKER_USERNAME }}/rustdesk-server:latest-amd64,
            ${{ secrets.DOCKER_USERNAME }}/rustdesk-server:latest-arm64v8,
            ${{ secrets.DOCKER_USERNAME }}/rustdesk-server:latest-armv7
          push: true

      - name: Create and push multi-arch manifest (branch)
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          base-image: ${{ secrets.DOCKER_USERNAME }}/rustdesk-server:master
          extra-images: |
            ${{ secrets.DOCKER_USERNAME }}/rustdesk-server:master-amd64,
            ${{ secrets.DOCKER_USERNAME }}/rustdesk-server:master-arm64v8,
            ${{ secrets.DOCKER_USERNAME }}/rustdesk-server:master-armv7
          push: true
